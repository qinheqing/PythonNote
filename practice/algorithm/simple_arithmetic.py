# -*- coding: utf-8 -*-
# 简单的一些算命题目

# 1. 题目：一个无序数组里有99个不重复正整数，范围从1到100，唯独缺少一个整数。如何找出这个缺失的整数？

# 解法1：创建一个哈希表，以1-100为键，值为是0，然后进行遍历数组，把值塞入map中
alist = [1,2,4,6,7,8,9,....12,14,65,78..]
adict = {}
# 生成一个表，key为1-100，值全为0
for x in xrange(1,101):
	adict[x] = 0

# 遍历列表，生成到dict
for num in alist:
	adict.[num] = 1

for k,v in adict:
	if v = 0:
		return k

# 解法二：先把元素进行排列，然后遍历数组，检查任意两个数是不是相差1，不是则为缺失
# 		简单的升序排序是非常容易的。只需要调用sorted()方法。
# 		它返回一个新的list，新的list的元素基于小于运算符(__lt__)来排序。


# 进行排列sorted按数字的从小到大进行排序
rlist = sorted(alist)
for n in rlist:
	a = 1
	if n = a:		# 如果 n = a 就是按照顺序的
		a = a + 1
		continue
	else:
		return a    # 缺失的数字

# 解法三：数学解法题目，直接先计算1-100的和，再计算数组的集合总和，两个相减，即为缺失的数
#

asum = 0
lsum = 0
for x in xrange(1,101):
	asum = asum  + x

for n in alist:
	lsum = lsum + n

print 'lost num is : ',asum - lsum

# 题目2. 一个无序数组里有若干个正整数，范围从1到100，其中99个整数都出现了偶数次，
# 只有一个整数出现了奇数次（比如1,1,2,2,3,3,4,5,5），如何找到这个出现奇数次的整数？
# 
# 解法1；使用计算机中的异或操作进行，计算时，相同的为0，不同的为1
# 		 遍历数组，依次进行异或运算，出现结果为1就是出现奇数次的


dlist = [1,1,2,2,3,3,4,5,5,6,6,7,7]
for index,x in enumerate(dlist):
	if 1 == x&dlist[index+1]:
		return dlist[index+1]

# 题目3. 一个无序数组里有若干个正整数，范围从1到100，其中98个整数都出现了偶数次，
# 只有两个整数出现了奇数次（比如1,1,2,2,3,4,5,5），如何找到这个出现奇数次的整数？

# 解法1： 分治思想