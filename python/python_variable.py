#-*-coding:utf-8-*-

# 在python中，变量是没有类型的，在使用变量的时候不需要声明，只要给这个变量赋值即可，但是，当用到变量的时候
# 必须先给变量赋值，如果用到的变量没有赋值，python编译会认为该变量未定义
一、可变变量和不可变变量
# python中变量的赋值实际上是拷贝了对象的引用
# python中的不可变对象：int，float，long，str，tuple
	# 对于不可变变量，如果改变了变量，则会创建一个新值，并把变量绑定到新值上，而旧值如果没有引用则会被回收
	# 不可变的类型可以计算hash值，并作为字典的key

# python中的可变数据对对象操作的时候，不需要在其他地方申请内存，只需要在对象后面继续申请，内存地址不会变

二、变量无类型，对象有类型
# 在python中，类型是属于对象的，而不是变量，变量和对象是分离的，对象是内存中存储数据的实体，变量是指向对象的指针

三、python函数参数
# python在函数参数传递的时候，把参数里面传入的变量对应的对象引用依次赋值给对应的函数内部变量
# 也就是说传递过来的是对象的引用的拷贝，而如果引用指向的是不可变对象，在方法中操作的时候就会生成另一个不可变对象
# 如果是可变对象，操作的还是原来的对象

四、变量的范围：
# 全局变量：能够被不同的函数，类或者文件共享的变量，在函数之外定义的变量都叫全局变量
#fileName:file1
g_num1 = 1 #定义全局变量
g_num2 = 2 #定义全局变量
def add_num():
  global g_num1 #引用全局变量
  g_num1 = 3 #修改全局变量的值
  result = g_num1 + 1
  print("result : %d"%result)
def sub_num():
  global g_num2
  g_num2 = 5
  result = g_num2 - 3
  print("result : %d"%result)
add_num()
sub_num()
print("g_num1:%d "%g_num1)
print("g_num2:%d "%g_num2)
#result : 4 result为局部变量
#result : 2
#g_num1:3 全局变量g_num1在执行add_num()函数时被改变
#g_num2:5 全局变量g_num2在执行sub_num()函数时被改变

#global保留字用于引用全局变量，如果不适用global关键字，在函数中再为g_num1赋值时将被解释为定义了一个局部变量g_num1
#应该尽量避免使用全局变量。不同的模块可以自由的访问全局变量，可能会导致全局变量的不可预知性。

五、类变量和对象变量
# 类本身拥有自己的类变量（保存在内存），当一个TestClass类的对象被构造时，会将当前类变量拷贝一份给这个对象，
# 当前类变量的值是多少，这个对象拷贝得到的类变量的值就是多少；而且，通过对象来修改类变量，并不会影响其他对象
# 的类变量的值，因为大家都有各自的副本，更不会影响类本身所拥有的那个类变量的值；只有类自己才能改变类本身拥有
# 的类变量的值